{"ast":null,"code":"var _jsxFileName = \"/Users/kongjiehao/image/frontend/src/ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ChatBot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // Toggle chatbox open/close\n  const toggleChat = () => setIsOpen(prev => !prev);\n\n  // Handle sending message and receiving response from Gemini API\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    // Capture the current input before clearing it\n    const currentInput = input;\n    const userMessage = {\n      sender: 'user',\n      text: currentInput\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setLoading(true);\n    try {\n      const response = await fetch('/api/gemini', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          prompt: currentInput\n        })\n      });\n      const data = await response.json();\n      const aiMessage = {\n        sender: 'ai',\n        text: data.response\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    } catch (err) {\n      console.error(err);\n      const errorMessage = {\n        sender: 'ai',\n        text: 'Sorry, there was an error processing your request.'\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Use onKeyDown to capture the Enter key\n  const handleKeyDown = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault(); // Prevent default form submission behavior\n      sendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbox-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"AI Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleChat,\n          className: \"close-button\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbox-body\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.sender}`,\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this)), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message ai\",\n          children: \"Typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbox-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyDown: handleKeyDown,\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          className: \"send-button\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleChat,\n      className: \"chatbot-toggle-button\",\n      children: \"Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"4DoytP21Jr486Y4VjG3vlt1O2gM=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatBot","_s","isOpen","setIsOpen","messages","setMessages","input","setInput","loading","setLoading","toggleChat","prev","sendMessage","trim","currentInput","userMessage","sender","text","response","fetch","method","headers","body","JSON","stringify","prompt","data","json","aiMessage","err","console","error","errorMessage","handleKeyDown","e","key","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","msg","index","type","value","onChange","target","onKeyDown","placeholder","_c","$RefreshReg$"],"sources":["/Users/kongjiehao/image/frontend/src/ChatBot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './ChatBot.css';\n\nconst ChatBot = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // Toggle chatbox open/close\n  const toggleChat = () => setIsOpen((prev) => !prev);\n\n  // Handle sending message and receiving response from Gemini API\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    // Capture the current input before clearing it\n    const currentInput = input;\n    const userMessage = { sender: 'user', text: currentInput };\n    setMessages((prev) => [...prev, userMessage]);\n    setInput('');\n    setLoading(true);\n\n    try {\n      const response = await fetch('/api/gemini', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ prompt: currentInput }),\n      });\n      const data = await response.json();\n      const aiMessage = { sender: 'ai', text: data.response };\n      setMessages((prev) => [...prev, aiMessage]);\n    } catch (err) {\n      console.error(err);\n      const errorMessage = { sender: 'ai', text: 'Sorry, there was an error processing your request.' };\n      setMessages((prev) => [...prev, errorMessage]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Use onKeyDown to capture the Enter key\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      e.preventDefault(); // Prevent default form submission behavior\n      sendMessage();\n    }\n  };\n\n  return (\n    <div className=\"chatbot-container\">\n      {isOpen ? (\n        <div className=\"chatbox\">\n          <div className=\"chatbox-header\">\n            <h4>AI Assistant</h4>\n            <button onClick={toggleChat} className=\"close-button\">\n              &times;\n            </button>\n          </div>\n          <div className=\"chatbox-body\">\n            {messages.map((msg, index) => (\n              <div key={index} className={`message ${msg.sender}`}>\n                {msg.text}\n              </div>\n            ))}\n            {loading && <div className=\"message ai\">Typing...</div>}\n          </div>\n          <div className=\"chatbox-footer\">\n            <input\n              type=\"text\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              onKeyDown={handleKeyDown}\n              placeholder=\"Type your message...\"\n            />\n            <button onClick={sendMessage} className=\"send-button\">\n              Send\n            </button>\n          </div>\n        </div>\n      ) : (\n        <button onClick={toggleChat} className=\"chatbot-toggle-button\">\n          Chat\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default ChatBot;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}